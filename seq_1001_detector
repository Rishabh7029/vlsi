module seq_1001_detector (
    input clk,          // Clock signal
    input reset,        // Reset signal
    input in,           // Input bitstream
    output reg out      // Output signal (1 if 1001 detected)
);

    // State encoding
    typedef enum reg [2:0] {
        S0 = 3'b000,    // Initial state
        S1 = 3'b001,    // '1' detected
        S2 = 3'b010,    // '10' detected
        S3 = 3'b011,    // '100' detected
        S4 = 3'b100     // '1001' detected
    } state_t;
    
    state_t current_state, next_state;

    // State transition
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= S0;
        else
            current_state <= next_state;
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            S0: next_state = in ? S1 : S0;
            S1: next_state = in ? S1 : S2;
            S2: next_state = in ? S3 : S0;
            S3: next_state = in ? S4 : S2;
            S4: next_state = in ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    // Output logic (Moore machine: output depends only on the state)
    always @(posedge clk or posedge reset) begin
        if (reset)
            out <= 0;
        else
            out <= (current_state == S4);
    end

endmodule
